.\" Copyright 2013 Vadim Vygonets
.\" This program is free software.  It comes without any warranty, to
.\" the extent permitted by applicable law.  You can redistribute it
.\" and/or modify it under the terms of the Do What The Fuck You Want
.\" To Public License, Version 2, as published by Sam Hocevar.  See
.\" the LICENSE file or http://sam.zoy.org/wtfpl/ for more details.
.Dd End of 2013
.Dt XD 1 LOCAL
.Os
.Sh NAME
.Nm xd
.Nd dump input files in hexadecimal, octal, binary or source, or reverse a hexadecimal dump operation
.Sh SYNOPSIS
.Nm
.Op Fl beo
.Op Fl c Ar bytes
.Op Fl d Ar off
.Op Fl g Ar bytes
.Op Fl l Ar len
.Op Fl s Oo Cm - Oc Ns Ar off
.Op Ar file ...
.Nm
.Fl C | G
.Op Fl P Ar pkg
.Op Fl V Ar var
.Op Fl c Ar bytes
.Op Fl l Ar len
.Op Fl s Oo Cm - Oc Ns Ar off
.Op Ar file ...
.Nm
.Fl r
.Op Fl d Ar off
.Op Fl O Ar outfile
.Op Ar file ...
.Nm
.Fl h
.Sh DESCRIPTION
.Nm
displays input files as hexadecimal, octal or binary numbers,
or as C or Go source.
With
.Fl r ,
.Nm
converts a hexadecimal dump into a binary file or patches an
existing file.
Its output format and user interface were inspired by
.Nm xxd .
It's quite fast.
.Pp
When no input files are given,
.Nm
reads from
.Pa stdin .
Multiple input files are read sequentially and treated as one
for all purposes, except that
.Fl s
only seeks in the first file.
.Pp
All numerical options may be given in decimal, octal (prefixed
with
.Ql 0 )
or hexadecimal (prefixed with
.Ql 0x ) .
.Pp
The options are as follows:
.Bl -tag
.It Fl b
Dump in binary.
.It Fl c Ar bytes
Number of bytes
.Dq ( columns )
per line.  Must be between 1 and 2047, inclusive.  Default is 16
for hex or octal, 6 for binary and 12 for C or Go source dump.
.It Fl C
Dump as C source code.  If a variable name is given with
.Fl V
or a
.Ar file
is specified on the command line,
output C source code consisting of an array of
.Vt char
containing the input and an
.Vt unsigned int
containing its length; otherwise just dump input
as comma-separated bytes in C/Go hexadecimal notation.
.It Fl G
Dump as a Go source file containing a slice of
.Vt byte .
.It Fl d Ar off
Add
.Ar off
to the displayed address.  In reverse mode
.Fl ( r ) ,
add
.Ar off
to the addresses read from the input.  May be negative.
.It Fl e
Dump groups in little endian byte order.
Only relevant to numeric (hexadecimal, octal or binary) dump.
.It Fl g Ar bytes
Number of bytes per group.
Only relevant to numeric (hexadecimal, octal or binary) dump.
Must be between 1 and 2047, inclusive.
If the number of bytes per line (see
.Fl c )
is not a multiple of
.Ar bytes ,
the last group on the line will be shorter.
Each group is treated as a big endian number (unless
.Fl e
is given) and printed as one numeric value.
Groups are separated from each other by one space character.
Default is 4 for hex or octal and 1 for binary.
.It Fl h
Show help and exit.
.It Fl l Ar len
Maximum input length.
.Nm
will stop dumping after at most
.Ar len
bytes.  Must be non-negative.
.It Fl o
Dump in octal.
.It Fl O Ar outfile
Specify the output file to be opened without truncating.
This option is mostly useful in combination with
.Fl r ,
resulting in patching of the file.
.It Fl P Ar pkg
Use
.Ar pkg
as the package name for Go source dump.  Default is
.Dq Li main .
.It Fl r
Reverse operation: translate hexadecimal dump in big endian byte
order into binary.  To write a new file or rewrite an existing
one, use shell redirection
.Ql ( > ) .
To patch an existing file, use
.Fl O .
.Sy Warning :
appending to a file using shell redirection
.Ql ( >> )
results in seeks failing silently on certain operating systems.
.Pp
Input lines are processed independently of each other.
Lines consisting of a single
.Ql *
character are ignored.  Other input lines start with a
hexadecimal address and an optional
.Ql :\&
(colon) character, followed by zero or more pairs of hexadecimal
digits, optionally separated by space characters.
Line processing stops at end of line or when a
.Ql |\&
character is encountered (as in
.Tn POSIX
.Xr hexdump 1
output).  If the colon character is present after the address, an
.Xr xxd 1 Ns
- or
.Nm Ns
-style dump is assumed, and two consecutive space characters also
terminate line processing.
.Pp
After the line is processed, if an offset has been specified by
.Fl d ,
it is added to the address.  The bytes represented by the
hexadecimal digits are then written to the output file at the
resulting address.
.It Fl s Ar off
Seek to the offset
.Ar off
in the first input file or
.Pa stdin .
When
.Ar off
is negative, a relative seek from the end of file is performed,
otherwise an absolute seek.  Displayed addresses start
with the resulting absolute offset, possibly modified by
.Fl d .
.It Fl V Ar var
Use
.Ar var
as the variable name for C or Go source dump.  If none is given,
a valid identifier is drived from the name of the first
.Ar file
given on the command line.  If neither is present, the default is
.Dq Li dump
for Go and an empty name for C.
.El
.Sh DIAGNOSTICS
.Nm
will exit with one of the following statuses:
.Bl -tag -width x -compact
.It 0
Success.
.It 1
An error occured.
.It 2
Invalid command line option.
.El
.Sh SEE ALSO
.Xr hd 1 ,
.Xr hexdump 1 ,
.Xr od 1 ,
.Xr xxd 1
.Sh AUTHORS
.An "Vadim Vygonets"
.Aq vadik@vygo.net
.Sh BUGS
Arguments of
.Fl P
and
.Fl V
are not checked for syntax.
.Pp
.Nm
will happily accept combinations of options that result in some
being ignored (e.g.,
.Fl d
when used with
.Fl C ) .
It will also accept nonsensical combinations (like
.Fl O
without
.Fl r )
and perform the requested nonsensical operation.
Multiple input files don't make sense either.
.Pp
Decimal dump is not supported.  But you get arbitrarily large
groups for this.  (If 2047-byte groups are not large enough for
you, remove the limitation from the
.Vt smallValue
type in the source.)
.Pp
Character
.Dq ( Tn ASCII )
dump is not supported.  Nor is
.Tn POSIX Ns
-style
output (only as input).  In general,
.Nm
is not very versatile.
